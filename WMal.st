Object subclass: #WMal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMal commentStamp: 'WilfredHughes 8/22/2017 00:27' prior: 0!I am a Make-A-Lisp (MAL) interpreter.!!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:34'!read: aString 	^aString.! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:35'!print: aValue	^aValue! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:34'!eval: aForm 	^aForm! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:33'!rep: aString	^self print: (self eval: (self read: aString)).! !Object subclass: #WMalReader	instanceVariableNames: 'tokens index'	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalReader commentStamp: 'WilfredHughes 8/23/2017 08:48' prior: 0!I convert tokens to (possibly nested) forms.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalReader class	instanceVariableNames: ''!!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/1/2017 19:01'!readAtom: aString	"Parse a single mal type."	^ WMalInteger withValue: aString asInteger! !!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/1/2017 08:37'!readString: aString	"Parse a string into mal types."	| parsed tokens |	parsed := OrderedCollection new.	tokens := (WMalTokenizer withSource: aString) tokenize.	parsed add: (self readForm: tokens readStream).	^ parsed! !!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/1/2017 08:35'!readForm: aTokenStream	^ self readAtom: (aTokenStream next)! !Object subclass: #WMalTester	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalTester commentStamp: 'WilfredHughes 8/22/2017 00:16' prior: 0!A utility class for playing with the WMal class.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalTester class	instanceVariableNames: ''!!WMalTester class methodsFor: 'accessing' stamp: 'WilfredHughes 8/22/2017 00:33'!evalString: aString	"comment stating purpose of message"	|   |	^ WMal new rep: aString.! !Object subclass: #WMalTokenizer	instanceVariableNames: 'source'	classVariableNames: 'TokenPattern'	poolDictionaries: ''	category: 'WMal'!!WMalTokenizer commentStamp: 'WilfredHughes 8/22/2017 00:41' prior: 0!I parse MAL tokens from a string.!!WMalTokenizer methodsFor: 'instance creation' stamp: 'WilfredHughes 8/28/2017 00:35'!tokenize	"Return the next valid token, or nil."	| matcher result |	matcher := RxMatcher forString: TokenPattern.	result := OrderedCollection new.	matcher		matchesOnStream: source readStream		do: [ :s :m | result add: (m subexpression: 2) ].	^ result reject: [ :str | str isEmpty  ]! !!WMalTokenizer methodsFor: 'accessing' stamp: 'WilfredHughes 8/22/2017 19:35'!source: aString	source := aString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalTokenizer class	instanceVariableNames: 'source'!!WMalTokenizer class methodsFor: 'instance creation' stamp: 'WilfredHughes 8/25/2017 08:31'!withSource: aString	"Initialise with source code specified."	| instance |	instance := self new.	instance source: aString.	^ instance! !!WMalTokenizer class methodsFor: 'initialization' stamp: 'WilfredHughes 8/22/2017 19:18'!initialize	"This isn't exactly the same as the MAL docs.We are forced to treat [ and ] separately due to syntax limitationsin the regex engine."	TokenPattern := '[\s,]*(~@|\[|[]{}()''`~^@]|"(\\.|[^\\"])*"|;.*|(\[|\]|[^\s{}(''"`,;)])*)'! !Object subclass: #WMalType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalType commentStamp: 'WilfredHughes 8/27/2017 18:04' prior: 0!I am the base class for all MAL types.!WMalType subclass: #WMalInteger	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalInteger commentStamp: 'WilfredHughes 8/28/2017 00:37' prior: 0!I represent whole numbers in MAL.!!WMalInteger methodsFor: 'comparing' stamp: 'WilfredHughes 8/31/2017 21:31'!= anObject	self class = anObject class		ifTrue: [ ^ value = (anObject value) ]		ifFalse: [ ^ false ]! !!WMalInteger methodsFor: 'printing' stamp: 'WilfredHughes 9/1/2017 19:00'!printOn: aStream	super printOn: aStream.	aStream		nextPutAll: '(';		nextPutAll: value printString ;		nextPutAll: ')'! !!WMalInteger methodsFor: 'accessing' stamp: 'WilfredHughes 8/27/2017 18:09'!value: anInteger 	value := anInteger ! !!WMalInteger methodsFor: 'accessing' stamp: 'WilfredHughes 9/1/2017 18:57'!value^ value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalInteger class	instanceVariableNames: ''!!WMalInteger class methodsFor: 'initialization' stamp: 'WilfredHughes 8/27/2017 18:08'!withValue: aNumber	| instance |	instance := self new.	instance value: aNumber.	^ instance! !WMalTokenizer initialize!TestCase subclass: #WMalIntegerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal-Tests'!!WMalIntegerTest commentStamp: '<historical>' prior: 0!A WMalIntegerTest is a test class for testing the behavior of WMalInteger!!WMalIntegerTest methodsFor: 'tests' stamp: 'WilfredHughes 9/1/2017 18:56'!testEquality	"Ensure = works as expected."	| int1a int1b int2 |	int1a := WMalInteger withValue: 1.	int1b := WMalInteger withValue: 1.	int2 := WMalInteger withValue: 2.	self assert: int1a = int1b.	self assert: int1a ~= int2! !TestCase subclass: #WMalReaderTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal-Tests'!!WMalReaderTest commentStamp: '<historical>' prior: 0!A WMalReaderTest is a test class for testing the behavior of WMalReader!!WMalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 9/1/2017 08:38'!testReadAtom	| parsed expected |	parsed := WMalReader readAtom: '123'.	expected := WMalInteger withValue: 123.	self assert: parsed equals: expected! !!WMalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 8/27/2017 18:00'!testReadString	| parsed |	parsed := WMalReader readString: '123'.	self assert: parsed size equals: 1! !TestCase subclass: #WMalTokenizerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal-Tests'!!WMalTokenizerTest commentStamp: 'WilfredHughes 8/27/2017 17:23' prior: 0!A WMalTokenizerTest is a test class for testing the behavior of WMalTokenizer.!!WMalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 8/27/2017 17:27'!testTokenize	| instance tokens expected |	instance := WMalTokenizer withSource: ' foo bar'.	tokens := instance tokenize.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !