Object subclass: #WMal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMal commentStamp: 'WilfredHughes 8/22/2017 00:27' prior: 0!I am a Make-A-Lisp (MAL) interpreter.!!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:35'!print: aValue	^aValue! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:34'!read: aString 	^aString.! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:34'!eval: aForm 	^aForm! !!WMal methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 8/22/2017 00:33'!rep: aString	^self print: (self eval: (self read: aString)).! !Object subclass: #WMalReader	instanceVariableNames: 'tokens index'	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalReader commentStamp: 'WilfredHughes 9/4/2017 08:32' prior: 0!I convert MAL source code to an AST of instance of WMalType.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalReader class	instanceVariableNames: ''!!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/4/2017 08:36'!readAtom: aStream	"Parse a single mal type."	| token |	token := aStream next.	token isAllDigits		ifTrue: [ ^ WMalInteger withValue: token asInteger ]		ifFalse: [ ^ WMalSymbol withValue: token ]! !!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/26/2017 19:36'!readForm: aTokenStream	| current |	current := aTokenStream peek.	current = '('		ifTrue: [ aTokenStream next.			^ self readList: aTokenStream ]		ifFalse: [ ^ self readAtom: aTokenStream ]! !!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 9/26/2017 19:41'!readString: aString	"Lex and parse a string of MAL source code."	| parsed tokens |	parsed := OrderedCollection new.	tokens := (WMalTokenizer withSource: aString) tokenize.	^self readForm: tokens readStream! !!WMalReader class methodsFor: 'as yet unclassified' stamp: 'WilfredHughes 10/30/2017 08:32'!readList: aTokenStream	| items current finished |	items := OrderedCollection new.	finished := false.	[ finished ]		whileFalse: [ current := aTokenStream peek.			Transcript				show: current;				cr.			current = ')'				ifTrue: [ finished := true. aTokenStream next. ]				ifFalse: [ items add: (self readForm: aTokenStream) ] ].	self assert: current = ')' description: 'Unclosed ('.	^ WMalList withValue: items! !Object subclass: #WMalTester	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalTester commentStamp: 'WilfredHughes 8/22/2017 00:16' prior: 0!A utility class for playing with the WMal class.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalTester class	instanceVariableNames: ''!!WMalTester class methodsFor: 'accessing' stamp: 'WilfredHughes 8/22/2017 00:33'!evalString: aString	"comment stating purpose of message"	|   |	^ WMal new rep: aString.! !Object subclass: #WMalTokenizer	instanceVariableNames: 'source'	classVariableNames: 'TokenPattern'	poolDictionaries: ''	category: 'WMal'!!WMalTokenizer commentStamp: 'WilfredHughes 8/22/2017 00:41' prior: 0!I parse MAL tokens from a string.!!WMalTokenizer methodsFor: 'accessing' stamp: 'WilfredHughes 8/22/2017 19:35'!source: aString	source := aString! !!WMalTokenizer methodsFor: 'instance creation' stamp: 'WilfredHughes 10/30/2017 08:20'!tokenize	"Return a collection of all the tokens in our string."	| matcher result |	matcher := RxMatcher forString: TokenPattern.	result := OrderedCollection new.	matcher		matchesOnStream: source readStream		do: [ :s :m | result add: (m subexpression: 2) ].	^ result reject: [ :str | str isEmpty ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalTokenizer class	instanceVariableNames: 'source'!!WMalTokenizer class methodsFor: 'initialization' stamp: 'WilfredHughes 8/22/2017 19:18'!initialize	"This isn't exactly the same as the MAL docs.We are forced to treat [ and ] separately due to syntax limitationsin the regex engine."	TokenPattern := '[\s,]*(~@|\[|[]{}()''`~^@]|"(\\.|[^\\"])*"|;.*|(\[|\]|[^\s{}(''"`,;)])*)'! !!WMalTokenizer class methodsFor: 'instance creation' stamp: 'WilfredHughes 8/25/2017 08:31'!withSource: aString	"Initialise with source code specified."	| instance |	instance := self new.	instance source: aString.	^ instance! !Object subclass: #WMalType	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalType commentStamp: 'WilfredHughes 8/27/2017 18:04' prior: 0!I am the base class for all MAL types.!!WMalType methodsFor: 'comparing' stamp: 'WilfredHughes 9/1/2017 19:13'!= anObject	self class = anObject class		ifTrue: [ ^ value = (anObject value) ]		ifFalse: [ ^ false ]! !!WMalType methodsFor: 'printing' stamp: 'WilfredHughes 9/1/2017 19:13'!printOn: aStream	super printOn: aStream.	aStream		nextPutAll: '(';		nextPutAll: value printString ;		nextPutAll: ')'! !!WMalType methodsFor: 'accessing' stamp: 'WilfredHughes 9/1/2017 19:16'!value: anInteger	value := anInteger.	^self! !!WMalType methodsFor: 'accessing' stamp: 'WilfredHughes 9/1/2017 19:16'!value^ value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalType class	instanceVariableNames: ''!!WMalType class methodsFor: 'initialization' stamp: 'WilfredHughes 9/4/2017 08:30'!withValue: aNumber	| instance |	instance := self new.	instance value: aNumber.	^ instance! !WMalType subclass: #WMalInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalInteger commentStamp: 'WilfredHughes 8/28/2017 00:37' prior: 0!I represent whole numbers in MAL.!WMalType subclass: #WMalList	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalList commentStamp: 'WilfredHughes 9/26/2017 19:27' prior: 0!I represent a list value in MAL.!!WMalList methodsFor: 'accessing' stamp: 'WilfredHughes 9/26/2017 19:38'!size	^ value size! !WMalType subclass: #WMalSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WMal'!!WMalSymbol commentStamp: 'WilfredHughes 9/5/2017 19:09' prior: 0!I represent symbols in MAL.I use Smalltalk strings to represent  a MAL symbol rather than Smalltalk symbols. This isto avoid issues with MAL symbols that aren't valid Smalltalk symbols.Two symbols are equal if they have the same string value.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WMalSymbol class	instanceVariableNames: ''!!WMalSymbol class methodsFor: 'initialize-release' stamp: 'WilfredHughes 9/1/2017 19:10'!withValue: aString	| instance |	instance := self new.	^instance value: aString.! !WMalTokenizer initialize!