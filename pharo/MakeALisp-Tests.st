TestCase subclass: #MalBoolTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalBoolTest commentStamp: 'WilfredHughes 11/1/2017 00:21' prior: 0!I test methods on WMalBool objects.!!MalBoolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testEvalIn	| val |	val := MalBool withValue: false.	self assert: (val evalIn: nil) equals: val! !!MalBoolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testPrint| val|val := MalBool withValue: false.self assert: (val print) equals: 'false'.! !TestCase subclass: #MalDivideTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalDivideTest commentStamp: '<historical>' prior: 0!A WMalDivideTest is a test class for testing the behavior of WMalDivide!!MalDivideTest methodsFor: 'tests-accessing' stamp: 'WilfredHughes 5/14/2019 10:03'!testCall	| args |	args := OrderedCollection		with: (MalInteger withValue: 11)		with: (MalInteger withValue: 5).	self		assert: (MalDivide new call: args withEnv: nil)		equals: (MalInteger withValue: 2)! !TestCase subclass: #MalEnvTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalEnvTest commentStamp: 'WilfredHughes 5/8/2019 09:53' prior: 0!A WMalEnvTest is a test class for testing the behavior of WMalEnv.!!MalEnvTest methodsFor: 'tests-setter' stamp: 'WilfredHughes 5/14/2019 10:00'!testAtIfAbsent	| dict |	dict := MalEnv new.	dict at: 'foo' put: 123.	self assert: (dict at: 'foo') equals: 123! !TestCase subclass: #MalIntegerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalIntegerTest commentStamp: '<historical>' prior: 0!A WMalIntegerTest is a test class for testing the behavior of WMalInteger!!MalIntegerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEquality	"Ensure = works as expected."	| int1a int1b int2 |	int1a := MalInteger withValue: 1.	int1b := MalInteger withValue: 1.	int2 := MalInteger withValue: 2.	self assert: int1a = int1b.	self assert: int1a ~= int2! !!MalIntegerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	"Ensure we can convert to a printable representation."	| int |	int := MalInteger withValue: 123.	self assert: int print equals: '123'! !TestCase subclass: #MalKeywordTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalKeywordTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing equality and printing for :keywords.!!MalKeywordTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEquality	"Ensure = works as expected."	| k1 k2 |	k1 := MalKeyword withValue: 'foo'.	k2 := MalKeyword withValue: 'bar'.	self assert: k1 = k1.	self assert: k1 ~= k2! !!MalKeywordTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	"Ensure we can convert to a printable representation."	| symValue |	symValue := MalKeyword withValue: 'foo'.	self assert: symValue print equals: ':foo'! !TestCase subclass: #MalListTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalListTest commentStamp: 'WilfredHughes 11/2/2017 08:46' prior: 0!Testing methods on WMalList.!!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEval	"Evaluate a list."	| val env |	val := Mal read: '(+ 1 (+ 2 3))'.	env := Dictionary new		at: '+' put: MalAdd new;		yourself.	self assert: (val evalIn: env) equals: (MalInteger withValue: 6)! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalEmpty"Empty list should evaluate to itself."	| val items |	items := OrderedCollection new.	val := MalList withValue: items.	self assert: (val evalIn: nil) equals: val! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	| val first second items |	first := MalInteger withValue: 1.	second := MalInteger withValue: 2.	items := OrderedCollection with: first with: second.	val := MalList withValue: items.		self assert: val print equals: '(1 2)'! !TestCase subclass: #MalMultiplyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalMultiplyTest commentStamp: '<historical>' prior: 0!A WMalMultiplyTest is a test class for testing the behavior of WMalMultiply!!MalMultiplyTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testCall	| args |	args := OrderedCollection		with: (MalInteger withValue: 2)		with: (MalInteger withValue: 3).	self		assert: (MalMultiply new call: args withEnv: nil)		equals: (MalInteger withValue: 6)! !TestCase subclass: #MalNilTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalNilTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Test evaluation and print for nil.!!MalNilTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalIn	| nilValue |	nilValue := MalNil new.	self assert: (nilValue evalIn: nil) equals: nilValue! !!MalNilTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	"Ensure we can convert to a printable representation."	| nilValue |	nilValue := MalNil new.	self assert: nilValue print equals: 'nil'! !TestCase subclass: #MalReaderTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalReaderTest commentStamp: '<historical>' prior: 0!A WMalReaderTest is a test class for testing the behavior of WMalReader!!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomSymbol	| parsed expected stream |	stream := (OrderedCollection with: 'abc-def3') readStream.	parsed := MalReader readAtom: stream.	expected := MalSymbol withValue: 'abc-def3'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtom	| parsed expected stream |	stream := (OrderedCollection with: '123') readStream.	parsed := MalReader readAtom: stream.	expected := MalInteger withValue: 123.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomNil	| parsed expected stream |	stream := (OrderedCollection with: 'nil') readStream.	parsed := MalReader readAtom: stream.	expected := MalNil new.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomString	| parsed expected stream |	stream := (OrderedCollection with: '"foo"') readStream.	parsed := MalReader readAtom: stream.	expected := MalString withValue: 'foo'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testReadAtomFalse	| parsed expected stream |	stream := (OrderedCollection with: 'false') readStream.	parsed := MalReader readAtom: stream.	expected := MalBool withValue: false.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:01'!testReadStringUnclosed	self should: [ MalReader readString: '(' ] raise: MalSyntaxError! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadStringWithComment	| parsed |	parsed := MalReader readString: ';foo123'.	self assert: parsed equals: (MalInteger withValue: 123)! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testReadAtomTrue	| parsed expected stream |	stream := (OrderedCollection with: 'true') readStream.	parsed := MalReader readAtom: stream.	expected := MalBool withValue: true.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:01'!testReadStringUnopened"todo: We don't consider foo) to be a syntax error because we only read one form."	self should: [MalReader readString: ')'] raise: MalSyntaxError.! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadString	| parsed |	parsed := MalReader readString: '123'.	self assert: parsed equals: (MalInteger withValue: 123)! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomNegativeNumber	| parsed expected stream |	stream := (OrderedCollection with: '-123') readStream.	parsed := MalReader readAtom: stream.	expected := MalInteger withValue: -123.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadForm	| parsed expectedItems |	parsed := MalReader readString: '(1 2)'.	self assert: parsed class equals: MalList.	expectedItems := OrderedCollection with: (MalInteger withValue: 1) with: (MalInteger withValue: 2).	self assert: parsed value equals: expectedItems! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomStringWithEscapes	| parsed expected stream |	stream := (OrderedCollection with: '"foo\\bar\"baz"') readStream.	parsed := MalReader readAtom: stream.	expected := MalString withValue: 'foo\bar"baz'.	self assert: parsed equals: expected! !TestCase subclass: #MalStringTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalStringTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing string literals.!!MalStringTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	| string |	string := MalString withValue: 'foo"bar\baz'.	self assert: string print equals: '"foo\"bar\\baz"'! !TestCase subclass: #MalSubtractTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalSubtractTest commentStamp: '<historical>' prior: 0!A WMalSubtractTest is a test class for testing the behavior of WMalSubtract!!MalSubtractTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testCall	| sexp |	sexp := Mal read: '(- 3 2)'.	self		assert: (sexp evalIn: Mal defaultEnv)		equals: (MalInteger		withValue: 1)! !TestCase subclass: #MalSymbolTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalSymbolTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing symbols, both bound and unbound.!!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalIn	"Test that we lookup values in the environment."	| fooSym env one |	fooSym := MalSymbol withValue: 'foo'.	one := MalInteger withValue: 1.	env := Dictionary new		at: 'foo' put: one;		yourself.	self assert: (fooSym evalIn: env) equals: one! !!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalInUnbound	"Test that we error on unbound symbols."	| fooSym env |	fooSym := MalSymbol withValue: 'foo'.	env := Dictionary new.	self should: [ fooSym evalIn: env ] raise: MalUnboundSymbol ! !!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testPrint	"Ensure we can convert to a printable representation."	| symValue |	symValue := MalSymbol withValue: 'foo'.	self assert: symValue print equals: 'foo'! !TestCase subclass: #MalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalTest commentStamp: '<historical>' prior: 0!A WMalTest is a test class for testing the behavior of WMal!!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/17/2019 10:17'!testLetOddBindings	| env letExpr |	letExpr := Mal read: '(let* (x 1 2) x)'.	env := Mal defaultEnv.	self should: [ letExpr evalIn: env ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/18/2019 00:23'!testIfTrue	| env expr |	expr := Mal read: '(if true 1 (no-such-fun))'.	env := Mal defaultEnv.	self assert: (expr evalIn: env) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/18/2019 00:22'!testIfNil	| env expr |	expr := Mal read: '(if nil (no-such-fun) 1)'.	env := Mal defaultEnv.	self assert: (expr evalIn: env) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/18/2019 00:12'!testIfFalse	| env expr |	expr := Mal read: '(if false (no-such-fun) 1)'.	env := Mal defaultEnv.	self assert: (expr evalIn: env) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/17/2019 23:31'!testLet	| env letExpr |	letExpr := Mal read: '(let* (x 1) 2 x)'.	env := Mal defaultEnv.	self assert: (letExpr evalIn: env) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalIn	| val env |	val := Mal read: '(+ (* 2 3) 1)'.	env := Mal defaultEnv.	self assert: (val evalIn: env) equals: (MalInteger withValue: 7) 		! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/17/2019 10:12'!testLetWrongArgs	| env letExpr |	letExpr := Mal read: '(let* 3 x)'.	env := Mal defaultEnv.	self should: [ letExpr evalIn: env ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/17/2019 10:19'!testLetBindingNotSymbol	| env letExpr |	letExpr := Mal read: '(let* (1 2) x)'.	env := Mal defaultEnv.	self should: [ letExpr evalIn: env ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/18/2019 00:04'!testDo	| env expr |	expr := Mal read: '(do 3 2 1)'.	env := Mal defaultEnv.	self assert: (expr evalIn: env) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testDef	| env defExpr |	defExpr := Mal read: '(def!! x 42)'.	env := Mal defaultEnv.	defExpr evalIn: env.	self		assert: ((MalSymbol withValue: 'x') evalIn: env)		equals: (MalInteger withValue: 42)! !TestCase subclass: #MalTokenizerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalTokenizerTest commentStamp: 'WilfredHughes 8/27/2017 17:23' prior: 0!A WMalTokenizerTest is a test class for testing the behavior of WMalTokenizer.!!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringNewline	| tokens expected |	tokens := MalTokenizer fromString: 'foobar'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringWithComment	| tokens expected |	tokens := MalTokenizer		fromString:			'; a comment			foo ; another commentbar; more comment'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringCommas	| tokens expected |	tokens := MalTokenizer fromString: ' ,,foo ,'.	expected := OrderedCollection with: 'foo'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromString	| tokens expected |	tokens := MalTokenizer fromString: ' foo bar'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !