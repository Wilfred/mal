TestCase subclass: #MalApplyFunctionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalApplyFunctionTest commentStamp: '<historical>' prior: 0!A MalApplyFunctionTest is a test class for testing the behavior of MalApplyFunction!!MalApplyFunctionTest methodsFor: 'tests' stamp: 'WilfredHughes 6/18/2019 22:49'!testCallWithCtx	| ctx expr |	expr := Mal read: '(apply + 1 2 (list 3 4))'.	ctx := MalContext default.	self assert: (expr evalIn: ctx) equals: (MalInteger withValue: 10)! !TestCase subclass: #MalBoolAtomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalBoolAtomTest commentStamp: '<historical>' prior: 0!A MalBoolAtomTest is a test class for testing the behavior of MalBoolAtom!!MalBoolAtomTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 14:07'!testMatchesFalse	self assert: (MalBoolLiteral matches: 'false') equals: true! !!MalBoolAtomTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 14:07'!testMatchesself assert: (MalBoolLiteral matches: 'true') equals: true! !TestCase subclass: #MalBoolTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalBoolTest commentStamp: 'WilfredHughes 11/1/2017 00:21' prior: 0!I test methods on WMalBool objects.!!MalBoolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testEvalIn	| val |	val := MalBool withValue: false.	self assert: (val evalIn: nil) equals: val! !!MalBoolTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint| val|val := MalBool withValue: false.self assert: (val asReadableString) equals: 'false'.! !TestCase subclass: #MalCountTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalCountTest commentStamp: '<historical>' prior: 0!A MalCountTest is a test class for testing the behavior of MalCount!!MalCountTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:26'!testCall	| args |	args := OrderedCollection		with: (MalList with: MalNil new).	self		assert: (MalCount new call: args withContext: nil)		equals: (MalInteger withValue: 1)! !TestCase subclass: #MalDefTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalDefTest commentStamp: '<historical>' prior: 0!A MalDefTest is a test class for testing the behavior of MalDef!!MalDefTest methodsFor: 'tests' stamp: 'WilfredHughes 6/5/2019 09:54'!testDefInClosure	"Ensure def!! still applies to the outer env."	| result |	result := (Mal read: '(do ((fn* () (def!! x 1))) x)') evalIn: MalContext default.	self assert: result equals: (MalInteger withValue: 1)! !TestCase subclass: #MalDivideTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalDivideTest commentStamp: '<historical>' prior: 0!A WMalDivideTest is a test class for testing the behavior of WMalDivide!!MalDivideTest methodsFor: 'tests-accessing' stamp: 'WilfredHughes 5/25/2019 11:25'!testCall	| args |	args := OrderedCollection		with: (MalInteger withValue: 11)		with: (MalInteger withValue: 5).	self		assert: (MalDivide new call: args withContext: nil)		equals: (MalInteger withValue: 2)! !TestCase subclass: #MalEmptyPredicateTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalEmptyPredicateTest commentStamp: 'WilfredHughes 5/18/2019 15:42' prior: 0!Testing the empty? function in MAL.!!MalEmptyPredicateTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:20'!testCall	| args |	args := OrderedCollection		with: (MalList new).	self		assert: (MalEmptyPredicate new call: args withContext: nil)		equals: (MalBool withValue: true)! !TestCase subclass: #MalEnvTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalEnvTest commentStamp: 'WilfredHughes 5/8/2019 09:53' prior: 0!A WMalEnvTest is a test class for testing the behavior of WMalEnv.!!MalEnvTest methodsFor: 'tests-setter' stamp: 'WilfredHughes 5/22/2019 10:13'!testAtPut	| dict sym |	dict := MalEnv new.	sym := MalSymbol withValue: 'foo'.	dict at: sym put: 123.	self assert: (dict at: sym) equals: 123! !TestCase subclass: #MalEqualTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalEqualTest commentStamp: '<historical>' prior: 0!A MalEqualTest is a test class for testing the behavior of MalEqual!!MalEqualTest methodsFor: 'test' stamp: 'WilfredHughes 6/2/2019 21:23'!testCallWithContextVector	| expr |	expr := Mal read: '(= 1 2)'.	self		assert: (expr evalIn: MalContext default)		equals: (MalBool withValue: false)! !!MalEqualTest methodsFor: 'test' stamp: 'WilfredHughes 6/2/2019 21:23'!testCallWithContext	| expr |	expr := Mal read: '(= 1 2)'.	self		assert: (expr evalIn: MalContext default)		equals: (MalBool withValue: false)! !!MalEqualTest methodsFor: 'test' stamp: 'WilfredHughes 6/2/2019 21:23'!testCallWithContextVectorAndList	| expr |	expr := Mal read: '(= [] (list))'.	self		assert: (expr evalIn: MalContext default)		equals: (MalBool withValue: true)! !TestCase subclass: #MalFirstTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalFirstTest commentStamp: '<historical>' prior: 0!A MalFirstTest is a test class for testing the behavior of MalFirst!!MalFirstTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 10:28'!testCallWithContextEmptyList	| expr |	expr := Mal read: '(first (list))'.	self		assert: (expr evalIn: MalContext default)		equals: (MalNil new)! !!MalFirstTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 10:23'!testCallWithContext	| expr |	expr := Mal read: '(first (list 1))'.	self		assert: (expr evalIn: MalContext default)		equals: (MalInteger  withValue: 1)! !TestCase subclass: #MalFunctionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalFunctionTest commentStamp: '<historical>' prior: 0!A MalFunctionTest is a test class for testing the behavior of MalFunction!!MalFunctionTest methodsFor: 'tests' stamp: 'WilfredHughes 6/17/2019 09:50'!testSubclassesHaveUniqueNames	| funcs |	funcs := Dictionary new.	MalFunction		allSubclassesDo: [ :func | 			| matchingFuncs |			matchingFuncs := funcs				at: func malName				ifAbsent: OrderedCollection new.			matchingFuncs add: func.			funcs at: func malName put: matchingFuncs ].	funcs		associationsDo: [ :assoc | 			self				assert: assoc value size = 1				description:					('{1} classes with malName {2}'						format:							{assoc value size.							assoc key}) ]! !TestCase subclass: #MalHashMapTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalHashMapTest commentStamp: 'WilfredHughes 5/31/2019 10:10' prior: 0!Testing how hash maps { foo bar } evaluate in MAL.!!MalHashMapTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:45'!testEval	| val expected |	val := Mal read: '{:foo (+ 2 3)}'.	expected := Mal read: '{:foo 5}'.	self assert: (val evalIn: MalContext default) equals: expected! !!MalHashMapTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	| key value hashMap |	key := MalString withValue: 'foo'.	value := MalInteger withValue: 1.	hashMap := MalHashMap withValue: (Dictionary with: key -> value).	self assert: hashMap asReadableString equals: '{"foo" 1}'! !TestCase subclass: #MalIntegerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalIntegerTest commentStamp: '<historical>' prior: 0!A WMalIntegerTest is a test class for testing the behavior of WMalInteger!!MalIntegerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEquality	"Ensure = works as expected."	| int1a int1b int2 |	int1a := MalInteger withValue: 1.	int1b := MalInteger withValue: 1.	int2 := MalInteger withValue: 2.	self assert: int1a = int1b.	self assert: int1a ~= int2! !!MalIntegerTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	"Ensure we can convert to a printable representation."	| int |	int := MalInteger withValue: 123.	self assert: int asReadableString equals: '123'! !TestCase subclass: #MalKeywordFunctionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalKeywordFunctionTest commentStamp: '<historical>' prior: 0!A MalKeywordFunctionTest is a test class for testing the behavior of MalKeywordFunction!!MalKeywordFunctionTest methodsFor: 'tests' stamp: 'WilfredHughes 6/18/2019 23:14'!testCallWithContext	| ctx expr |	expr := Mal read: '(keyword "foo")'.	ctx := MalContext default.	self assert: (expr evalIn: ctx) equals: (MalKeyword withValue: ':foo')! !TestCase subclass: #MalKeywordTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalKeywordTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing equality and printing for :keywords.!!MalKeywordTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:06'!testEquality	"Ensure = works as expected."	| k1 k2 |	k1 := MalKeyword withValue: ':foo'.	k2 := MalKeyword withValue: ':bar'.	self assert: k1 = k1.	self assert: k1 ~= k2! !!MalKeywordTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	"Ensure we can convert to a printable representation."	| symValue |	symValue := MalKeyword withValue: ':foo'.	self assert: symValue asReadableString equals: ':foo'! !TestCase subclass: #MalListFunctionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalListFunctionTest commentStamp: '<historical>' prior: 0!A MalListFunctionTest is a test class for testing the behavior of MalListFunction!!MalListFunctionTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:25'!testCall	| args |	args := OrderedCollection		with: (MalInteger withValue: 2)		with: (MalInteger withValue: 3).	self		assert: (MalListFunction new call: args withContext: nil)		equals: (MalList withValue: args)! !TestCase subclass: #MalListPredicateTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalListPredicateTest commentStamp: 'WilfredHughes 5/18/2019 15:28' prior: 0!Testing the list? function.!!MalListPredicateTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:25'!testCallNotList	| args |	args := OrderedCollection		with: (MalInteger withValue: 1).	self		assert: (MalListPredicate new call: args withContext: nil)		equals: (MalBool withValue: false)! !!MalListPredicateTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:21'!testCall	| args |	args := OrderedCollection		with: (MalList new).	self		assert: (MalListPredicate new call: args withContext: nil)		equals: (MalBool withValue: true)! !!MalListPredicateTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:25'!testCallArity	| args |	args := OrderedCollection new.	self		should: [ MalListPredicate new call: args withContext: nil ]		raise: MalWrongArity ! !TestCase subclass: #MalListTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalListTest commentStamp: 'WilfredHughes 5/29/2019 10:31' prior: 0!Testing methods on MalList.!!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:44'!testEval	"Evaluate a list."	| val env ctx |	val := Mal read: '(+ 1 (+ 2 3))'.	env := Dictionary new		at: '+' put: MalAdd new;		yourself.	ctx := MalContext new		env: env;		yourself.	self assert: (val evalIn: ctx) equals: (MalInteger withValue: 6)! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 6/13/2019 10:22'!testEvalEmpty	"Empty list should evaluate to itself."	| val |	val := Mal read: '()'.	self assert: (val evalIn: nil) equals: val! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:27'!testPrint	| val |	val := MalList		with: (MalInteger withValue: 1)		with: (MalInteger withValue: 2).	self assert: val asReadableString equals: '(1 2)'! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 01:00'!testEvalMacroThatReturnsAtom	| expr ctx |	expr := Mal		read: '(do (defmacro!! one (fn* () 1)) (one))'.	ctx := MalContext default.	self assert: (expr evalIn: ctx) equals: (MalInteger withValue: 1)! !!MalListTest methodsFor: 'tests' stamp: 'WilfredHughes 6/13/2019 19:31'!testEvalMacro	| expr ctx |	expr := Mal read: '(do (defmacro!! foo (fn* () `(if true 1 2))) (foo))'.	ctx := MalContext default.	self assert: (expr evalIn: ctx) equals: (MalInteger withValue: 1)! !TestCase subclass: #MalMapFunctionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalMapFunctionTest commentStamp: '<historical>' prior: 0!A MalMapFunctionTest is a test class for testing the behavior of MalMapFunction!!MalMapFunctionTest methodsFor: 'tests' stamp: 'WilfredHughes 6/18/2019 23:11'!testCallWithContext	| ctx expr |	expr := Mal read: '(map (fn* [x] (+ x 1)) [1 2])'.	ctx := MalContext default.	self		assert: (expr evalIn: ctx)		equals:			(MalList				with: (MalInteger withValue: 2)				with: (MalInteger withValue: 3))! !TestCase subclass: #MalMultiplyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalMultiplyTest commentStamp: 'WilfredHughes 5/29/2019 10:31' prior: 0!A MalMultiplyTest is a test class for testing the behavior of MalMultiply!!MalMultiplyTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:25'!testCall	| args |	args := OrderedCollection		with: (MalInteger withValue: 2)		with: (MalInteger withValue: 3).	self		assert: (MalMultiply new call: args withContext: nil)		equals: (MalInteger withValue: 6)! !TestCase subclass: #MalNilTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalNilTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Test evaluation and print for nil.!!MalNilTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testEvalIn	| nilValue |	nilValue := MalNil new.	self assert: (nilValue evalIn: nil) equals: nilValue! !!MalNilTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	"Ensure we can convert to a printable representation."	| nilValue |	nilValue := MalNil new.	self assert: nilValue asReadableString equals: 'nil'! !TestCase subclass: #MalNthTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalNthTest commentStamp: '<historical>' prior: 0!A MalNthTest is a test class for testing the behavior of MalNth!!MalNthTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 10:40'!testCallWithContext	| expr |	expr := Mal read: '(nth (list 10 11 12) 1)'.	self		assert: (expr evalIn: MalContext default)		equals: (MalInteger withValue: 11)! !!MalNthTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 10:38'!testCallWithContextOutOfBounds	| expr |	expr := Mal read: '(nth (list 10 11 12) 42)'.	self should: [expr evalIn: MalContext default] raise: MalError! !TestCase subclass: #MalQuasiquoteTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalQuasiquoteTest commentStamp: 'WilfredHughes 6/7/2019 21:33' prior: 0!Testing evaluation of quasiquotation.!!MalQuasiquoteTest methodsFor: 'tests' stamp: 'WilfredHughes 6/7/2019 21:37'!testQuasiquoteList	| result expected |	result := (Mal read: '(quasiquote (1 2 3))')		evalIn: MalContext default.	expected := Mal read: '(1 2 3)'.	self assert: result equals: expected! !!MalQuasiquoteTest methodsFor: 'tests' stamp: 'WilfredHughes 6/7/2019 21:54'!testQuasiquoteUnsplice	| result expected |	result := (Mal read: '(do (def!! x ''(10 11)) `(1 ~@x 2))')		evalIn: MalContext default.	expected := Mal read: '(1 10 11 2)'.	self assert: result equals: expected! !!MalQuasiquoteTest methodsFor: 'tests' stamp: 'WilfredHughes 6/7/2019 21:34'!testQuasiquoteAtom	| result |	result := (Mal read: '`42')		evalIn: MalContext default.	self assert: result equals: (MalInteger withValue: 42)! !!MalQuasiquoteTest methodsFor: 'tests' stamp: 'WilfredHughes 6/9/2019 01:19'!testQuasiquoteVector	| result expected |	result := (Mal read: '`[1 foo]')		evalIn: MalContext default.	expected := Mal read: '(1 foo)'.	self assert: result equals: expected! !TestCase subclass: #MalReadStringTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalReadStringTest commentStamp: '<historical>' prior: 0!A MalReadStringTest is a test class for testing the behavior of MalReadString!!MalReadStringTest methodsFor: 'test' stamp: 'WilfredHughes 6/15/2019 10:29'!testCallArgWithContext	| expr expected |	expr := Mal read: '(read-string "(1 foo)")'.	expected := MalList				with: (MalInteger withValue: 1)				with: (MalSymbol withValue: 'foo').	self assert: (expr evalIn: MalContext default) equals: expected! !TestCase subclass: #MalReaderTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalReaderTest commentStamp: 'WilfredHughes 5/29/2019 10:31' prior: 0!A MalReaderTest is a test class for testing the behavior of MalReader!!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 00:51'!testReadAtomStringWithEscapes	| parsed expected stream |	stream := (OrderedCollection with: '"foo\\bar\"baz\nbiz"') readStream.	parsed := MalReader readAtom: stream.	expected := MalString withValue: 'foo\bar"bazbiz'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:31'!testReaderMacroDeref	| parsed |	parsed := MalReader readString: '@foo'.	self		assert: parsed		equals:			(MalList						with: (MalSymbol withValue: 'deref')						with: (MalSymbol withValue: 'foo'))! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:00'!testReadAtomKeyword	| parsed expected stream |	stream := (OrderedCollection with: ':foo') readStream.	parsed := MalReader readAtom: stream.	expected := MalKeyword withValue: ':foo'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtom	| parsed expected stream |	stream := (OrderedCollection with: '123') readStream.	parsed := MalReader readAtom: stream.	expected := MalInteger withValue: 123.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testReadAtomFalse	| parsed expected stream |	stream := (OrderedCollection with: 'false') readStream.	parsed := MalReader readAtom: stream.	expected := MalBool withValue: false.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:01'!testReadStringUnclosed	self should: [ MalReader readString: '(' ] raise: MalSyntaxError! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadStringWithComment	| parsed |	parsed := MalReader readString: ';foo123'.	self assert: parsed equals: (MalInteger withValue: 123)! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomSymbol	| parsed expected stream |	stream := (OrderedCollection with: 'abc-def3') readStream.	parsed := MalReader readAtom: stream.	expected := MalSymbol withValue: 'abc-def3'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:01'!testReadStringUnopened"todo: We don't consider foo) to be a syntax error because we only read one form."	self should: [MalReader readString: ')'] raise: MalSyntaxError.! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/30/2019 00:58'!testReadStringVector	| parsed expectedItems |	parsed := MalReader readString: '[1 2]'.	self assert: parsed class equals: MalVector.	expectedItems := OrderedCollection		with: (MalInteger withValue: 1)		with: (MalInteger withValue: 2).	self assert: parsed value equals: expectedItems! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomNegativeNumber	| parsed expected stream |	stream := (OrderedCollection with: '-123') readStream.	parsed := MalReader readAtom: stream.	expected := MalInteger withValue: -123.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/31/2019 10:14'!testReadStringHashMap	| parsed expectedItems |	parsed := MalReader readString: '{:foo 1}'.	self assert: parsed class equals: MalHashMap.	expectedItems := Dictionary		with: ((MalKeyword withValue: ':foo') -> (MalInteger withValue: 1)).	self assert: parsed value equals: expectedItems! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomNil	| parsed expected stream |	stream := (OrderedCollection with: 'nil') readStream.	parsed := MalReader readAtom: stream.	expected := MalNil new.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 6/7/2019 10:06'!testReaderMacroQuasiquote	| parsed expected |	parsed := MalReader readString: '`~foo'.	expected := MalReader readString: '(quasiquote (unquote foo))'.	self		assert: parsed		equals:			expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/30/2019 00:58'!testReadStringList	| parsed expectedItems |	parsed := MalReader readString: '(1 2)'.	self assert: parsed class equals: MalList.	expectedItems := OrderedCollection with: (MalInteger withValue: 1) with: (MalInteger withValue: 2).	self assert: parsed value equals: expectedItems! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadAtomString	| parsed expected stream |	stream := (OrderedCollection with: '"foo"') readStream.	parsed := MalReader readAtom: stream.	expected := MalString withValue: 'foo'.	self assert: parsed equals: expected! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:03'!testReadString	| parsed |	parsed := MalReader readString: '123'.	self assert: parsed equals: (MalInteger withValue: 123)! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:30'!testReadStringWithCommentLineFeed	| parsed |	parsed := MalReader readString: '(do ;' , Character lf asString , ')'.	self		assert: parsed		equals:			(MalList				with: (MalSymbol withValue: 'do'))! !!MalReaderTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testReadAtomTrue	| parsed expected stream |	stream := (OrderedCollection with: 'true') readStream.	parsed := MalReader readAtom: stream.	expected := MalBool withValue: true.	self assert: parsed equals: expected! !TestCase subclass: #MalRestTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalRestTest commentStamp: '<historical>' prior: 0!A MalRestTest is a test class for testing the behavior of MalRest!!MalRestTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:16'!testCallWithContextVector	| expr expected result |	expr := Mal read: '(rest [1 2])'.	expected := Mal read: '(2)'.	result := (expr evalIn: MalContext default).	self assert: result equals: expected.	self assert: result class equals: MalList! !!MalRestTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 10:31'!testCallWithContext	| expr expected |	expr := Mal read: '(rest (list 1 2))'.	expected := Mal read: '(2)'.	self assert: (expr evalIn: MalContext default) equals: expected! !!MalRestTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:22'!testCallWithContextNil	| expr |	expr := Mal read: '(rest nil)'.	self assert: (expr evalIn: MalContext default) class equals: MalList! !TestCase subclass: #MalSpecialFormTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalSpecialFormTest commentStamp: 'WilfredHughes 6/14/2019 00:47' prior: 0!Utility tests to ensure special forms are uniquely named.!!MalSpecialFormTest methodsFor: 'tests' stamp: 'WilfredHughes 6/6/2019 10:18'!testSubclassesHaveUniqueNames	| nameCounts |	nameCounts := Dictionary new.	MalSpecialForm 		allSubclassesDo: [ :func | 			| count |			count := nameCounts at: func malName ifAbsent: 0.			nameCounts at: func malName put: count + 1 ].	nameCounts		associationsDo: [ :assoc | 			self				assert: assoc value = 1				description:					('{1} classes with malName {2}'						format:							{assoc value.							assoc key}) ]! !TestCase subclass: #MalStringTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalStringTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing string literals.!!MalStringTest methodsFor: 'tests' stamp: 'WilfredHughes 6/6/2019 09:51'!testPrint	| string contents |	contents := 'foo"bar\baz' , Character lf asString , 'biz'.	string := MalString		withValue:			contents.	self assert: string asReadableString equals: '"foo\"bar\\baz\nbiz"'! !TestCase subclass: #MalSubtractTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalSubtractTest commentStamp: 'WilfredHughes 5/29/2019 10:31' prior: 0!A MalSubtractTest is a test class for testing the behavior of MalSubtract!!MalSubtractTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:45'!testCall	| sexp |	sexp := Mal read: '(- 3 2)'.	self		assert: (sexp evalIn: MalContext default)		equals: (MalInteger withValue: 1)! !TestCase subclass: #MalSymbolTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalSymbolTest commentStamp: 'WilfredHughes 5/16/2019 09:14' prior: 0!Testing symbols, both bound and unbound.!!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:46'!testEvalIn	"Test that we lookup values in the environment."	| fooSym env one ctx |	fooSym := MalSymbol withValue: 'foo'.	one := MalInteger withValue: 1.	env := Dictionary new		at: 'foo' put: one;		yourself.	ctx := MalContext new env: env; yourself.	self assert: (fooSym evalIn: ctx) equals: one! !!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 5/25/2019 11:46'!testEvalInUnbound	"Test that we error on unbound symbols."	| fooSym ctx |	fooSym := MalSymbol withValue: 'foo'.	ctx := MalContext new env: (Dictionary new); yourself.	self should: [ fooSym evalIn: ctx ] raise: MalUnboundSymbol! !!MalSymbolTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	"Ensure we can convert to a printable representation."	| symValue |	symValue := MalSymbol withValue: 'foo'.	self assert: symValue asReadableString equals: 'foo'! !TestCase subclass: #MalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalTest commentStamp: '<historical>' prior: 0!A WMalTest is a test class for testing the behavior of WMal!!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:49'!testFnVariadic	| expr result |	expr := Mal read: '(fn* (x y & rest) rest)'.	result := expr evalIn: MalContext default.	self assert: result variadicSym equals: (MalSymbol withValue: 'rest').	self		assert: result bindings		equals:			(OrderedCollection				with: (MalSymbol withValue: 'x')				with: (MalSymbol withValue: 'y'))! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:48'!testFnBadParams	| expr |	expr := Mal read: '(fn* (x 1 "foo") 1)'.	self should: [ expr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:44'!assertReadEval: src equals: expected	| expr |	expr := Mal read: src.	self assert: (expr evalIn: MalContext default) equals: expected! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/15/2019 10:31'!testFnVariadicCall	| expr two three |	expr := Mal read: '((fn* (x & args) args) 1 2 3)'.	two := MalInteger withValue: 2.	three := MalInteger withValue: 3.	self		assert: (expr evalIn: MalContext default)		equals: (MalList with: two with: three)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:46'!testIfTrue	self assertReadEval: '(if true 1 (no-such-fun))' equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:44'!testFnCall	self		assertReadEval: '((fn* (x) (+ x 1)) 2)'		equals: (MalInteger withValue: 3)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:47'!testFn	| expr |	expr := Mal read: '(fn* (x) 1)'.	self		assert: (expr evalIn: MalContext default) class		equals: MalClosure! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:45'!testIfNil	self assertReadEval: '(if nil (no-such-fun) 1)' equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:47'!testLet	self		assertReadEval: '(let* (x 1) 2 x)'		equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:42'!testDo	self		assertReadEval: '(do (def!! x 1) x)'		equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/13/2019 20:07'!testIfFalse	| ctx expr |	expr := Mal read: '(if false (no-such-fun) 1)'.	ctx := MalContext default.	self assert: (expr evalIn: ctx) equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:48'!testFnBadParamsVariadic	| expr |	expr := Mal read: '(fn* (x & foo bar) 1)'.	self should: [ expr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:47'!testEvalIn	| val ctx |	val := Mal read: '(+ (* 2 3) 1)'.	ctx := MalContext default.	self assert: (val evalIn: ctx) equals: (MalInteger withValue: 7)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:45'!testIfOneArg	self assertReadEval: '(if true 1)' equals: (MalInteger withValue: 1)! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:50'!testLetOddBindings	| letExpr |	letExpr := Mal read: '(let* (x 1 2) x)'.	self should: [ letExpr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:50'!testLetBindingNotSymbol	| letExpr |	letExpr := Mal read: '(let* (1 2) x)'.	self should: [ letExpr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:51'!testLetWrongArgs	| letExpr |	letExpr := Mal read: '(let* 3 x)'.	self should: [ letExpr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:48'!testFnBadParamsVariadicTwice	| expr |	expr := Mal read: '(fn* (x & &) 1)'.	self should: [ expr evalIn: MalContext default ] raise: MalError! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/14/2019 00:46'!testIfOneArgFalse	self assertReadEval: '(if false 1)' equals: MalNil new! !!MalTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:46'!testDef	| defExpr ctx |	defExpr := Mal read: '(def!! x 42)'.	ctx := MalContext default.	defExpr evalIn: ctx.	self		assert: ((MalSymbol withValue: 'x') evalIn: ctx)		equals: (MalInteger withValue: 42)! !TestCase subclass: #MalTokenizerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalTokenizerTest commentStamp: 'WilfredHughes 8/27/2017 17:23' prior: 0!A WMalTokenizerTest is a test class for testing the behavior of WMalTokenizer.!!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringNewline	| tokens expected |	tokens := MalTokenizer fromString: 'foobar'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/30/2019 09:53'!testFromStringVector	| tokens expected |	tokens := MalTokenizer fromString: '[1]'.	expected := OrderedCollection with: '['		with: '1'		with: ']'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/30/2019 09:53'!testFromStringHashMap	| tokens expected |	tokens := MalTokenizer fromString: '{:foo 1}'.	expected := OrderedCollection		with: '{'		with: ':foo'		with: '1'		with: '}'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringWithComment	| tokens expected |	tokens := MalTokenizer		fromString:			'; a comment			foo ; another commentbar; more comment'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromStringCommas	| tokens expected |	tokens := MalTokenizer fromString: ' ,,foo ,'.	expected := OrderedCollection with: 'foo'.	self assert: tokens equals: expected! !!MalTokenizerTest methodsFor: 'tests' stamp: 'WilfredHughes 5/14/2019 10:02'!testFromString	| tokens expected |	tokens := MalTokenizer fromString: ' foo bar'.	expected := OrderedCollection with: 'foo' with: 'bar'.	self assert: tokens equals: expected! !TestCase subclass: #MalVectorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MakeALisp-Tests'!!MalVectorTest commentStamp: 'WilfredHughes 5/29/2019 10:32' prior: 0!Testing printing and evaluating of vectors.!!MalVectorTest methodsFor: 'tests' stamp: 'WilfredHughes 5/29/2019 10:33'!testEvalEmpty	"Empty vector should evaluate to itself."	| val |	val := MalVector withValue: OrderedCollection new.	self assert: (val evalIn: nil) equals: val! !!MalVectorTest methodsFor: 'tests' stamp: 'WilfredHughes 6/2/2019 20:51'!testEval	"Evaluate a vector and ensure elements are evaluated."	| val expected |	val := Mal read: '[1 (+ 2 3)]'.	expected := Mal read: '[1 5]'.	self assert: (val evalIn: MalContext default) equals: expected! !!MalVectorTest methodsFor: 'tests' stamp: 'WilfredHughes 6/4/2019 00:36'!testPrint	| val first second items |	first := MalInteger withValue: 1.	second := MalInteger withValue: 2.	items := OrderedCollection with: first with: second.	val := MalVector withValue: items.	self assert: val asReadableString equals: '[1 2]'! !